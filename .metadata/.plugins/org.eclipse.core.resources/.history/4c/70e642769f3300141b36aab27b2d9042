package recsys;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
 
public class UserBasedRecommender {
	public HashMap<Integer, HashMap<Integer,Integer>> ratings;
	public HashMap<Integer, User> users;
	public UserBasedRecommender(HashMap<Integer, HashMap<Integer,Integer>> ratings, HashMap<Integer, User> users){
		this.ratings = ratings;
		this.users = users;
	}
	
	public float averageRatings(HashMap<Integer,Integer> ratings){
		float average = 0;
		Iterator<Integer> iter;
		iter = ratings.keySet().iterator();
		while(iter.hasNext()){
			Integer key = iter.next();
			average += ratings.get(key);
		}
		return average /= ratings.size();
	}
	public double Similarity(Integer userId1, Integer userId2){
		float averageRatingUser1, averageRatingUser2 = 0;
		double top = 0, bottom = 0, bottom1 = 0, bottom2 = 0;
		HashMap<Integer,Integer> user1Ratings = this.ratings.get(userId1);
		averageRatingUser1 = averageRatings(user1Ratings);
		HashMap<Integer,Integer> user2Ratings = this.ratings.get(userId2);
		averageRatingUser2 = averageRatings(user2Ratings);
		for (Integer item1 : user1Ratings.keySet()) {
			for (Integer item2 : user2Ratings.keySet()) {
					if (item1 == item2){
						top += (user1Ratings.get(item1) - averageRatingUser1)*(user2Ratings.get(item2) - averageRatingUser2);
						bottom1 += Math.pow((user1Ratings.get(item1) - averageRatingUser1),2);
						bottom2 += Math.pow((user2Ratings.get(item2) - averageRatingUser2),2);
					}
				
			}
			
		}
		bottom = Math.sqrt(bottom1)*Math.sqrt(bottom2);
		if (bottom == 0) {
			return 0.0;
		} else {
			return top / bottom;
		}
	}

	public ArrayList<KeyValue> kNearestNeighbors(Integer userId){
		ArrayList<KeyValue> simValues = new ArrayList<KeyValue>();
		for (Integer user : users.keySet()) {
			simValues.add(new KeyValue(user, Similarity(userId, user)));
		}
		Collections.sort(simValues, new KeyValueComparator());
		return simValues;
	}
	
	
	public Double predictRating(User user, Item item, Integer k){
		float averageRating = averageRatings(ratings.get(user.id));
		double simalarities = 0, aux = 0, sim;
		if (user.getkSimilars().isEmpty()){
			user.setkSimilars(kNearestNeighbors(user.id));
		}
		ArrayList<KeyValue> similars = user.getkSimilars();
		Iterator<KeyValue> iter = similars.iterator();
		for (int i = 0; i < k; i++) {
			KeyValue userb = iter.next();
			sim = userb.value;
			simalarities += sim;
			if (ratings.get(userb.key).containsKey(item.id)){
				aux += sim * (ratings.get(userb.key).get(item.id) -  averageRatings(ratings.get(user.id)));
			}
		}
		return averageRating + (aux/simalarities);
	}

}